//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""LeverAndValve"",
            ""id"": ""4e932f76-641a-461c-8016-e8a4410e0d24"",
            ""actions"": [
                {
                    ""name"": ""FirstLever"",
                    ""type"": ""Button"",
                    ""id"": ""0394392f-e022-4e67-9f57-de4c1091f535"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondlever"",
                    ""type"": ""Button"",
                    ""id"": ""6ce5dfc8-5515-4fee-b02a-873e00ee8f94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Valve"",
                    ""type"": ""Value"",
                    ""id"": ""fcd26c52-dde4-4f9f-a5c1-9aa12af2379d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ad3bb6a-6677-4509-83d8-1cb21c775aa3"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondlever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8645a189-c3dd-4f15-a729-621f4ee0e35d"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondlever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7726a2eb-359c-4037-add1-96229f4e0de5"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstLever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52b05a92-15e9-4914-a9d6-ca24da46041e"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstLever"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3796142-7626-4a52-95be-65ac4ced2608"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Valve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33f29a3d-501c-4b4a-846f-959c66d40e64"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Valve"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ee0af688-8c26-4fd7-90a3-d0d94a65a6b1"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cdc4d856-8d37-458f-9896-2c844fb53bc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""RobotComponentAndTurnPage"",
                    ""id"": ""8255f53e-a51c-45fa-aad1-7b1c0295962b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0f41d246-2175-4e33-b897-04a9d6c9a1aa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2b9fa900-2909-45a3-9f8a-d789fdf4508c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""30917a71-c51e-4f1f-9270-3ec0a6e87c75"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e51abfc3-a108-420b-93ac-7e0d19d1f539"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeverAndValve
        m_LeverAndValve = asset.FindActionMap("LeverAndValve", throwIfNotFound: true);
        m_LeverAndValve_FirstLever = m_LeverAndValve.FindAction("FirstLever", throwIfNotFound: true);
        m_LeverAndValve_Secondlever = m_LeverAndValve.FindAction("Secondlever", throwIfNotFound: true);
        m_LeverAndValve_Valve = m_LeverAndValve.FindAction("Valve", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeverAndValve
    private readonly InputActionMap m_LeverAndValve;
    private List<ILeverAndValveActions> m_LeverAndValveActionsCallbackInterfaces = new List<ILeverAndValveActions>();
    private readonly InputAction m_LeverAndValve_FirstLever;
    private readonly InputAction m_LeverAndValve_Secondlever;
    private readonly InputAction m_LeverAndValve_Valve;
    public struct LeverAndValveActions
    {
        private @PlayerControls m_Wrapper;
        public LeverAndValveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstLever => m_Wrapper.m_LeverAndValve_FirstLever;
        public InputAction @Secondlever => m_Wrapper.m_LeverAndValve_Secondlever;
        public InputAction @Valve => m_Wrapper.m_LeverAndValve_Valve;
        public InputActionMap Get() { return m_Wrapper.m_LeverAndValve; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeverAndValveActions set) { return set.Get(); }
        public void AddCallbacks(ILeverAndValveActions instance)
        {
            if (instance == null || m_Wrapper.m_LeverAndValveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeverAndValveActionsCallbackInterfaces.Add(instance);
            @FirstLever.started += instance.OnFirstLever;
            @FirstLever.performed += instance.OnFirstLever;
            @FirstLever.canceled += instance.OnFirstLever;
            @Secondlever.started += instance.OnSecondlever;
            @Secondlever.performed += instance.OnSecondlever;
            @Secondlever.canceled += instance.OnSecondlever;
            @Valve.started += instance.OnValve;
            @Valve.performed += instance.OnValve;
            @Valve.canceled += instance.OnValve;
        }

        private void UnregisterCallbacks(ILeverAndValveActions instance)
        {
            @FirstLever.started -= instance.OnFirstLever;
            @FirstLever.performed -= instance.OnFirstLever;
            @FirstLever.canceled -= instance.OnFirstLever;
            @Secondlever.started -= instance.OnSecondlever;
            @Secondlever.performed -= instance.OnSecondlever;
            @Secondlever.canceled -= instance.OnSecondlever;
            @Valve.started -= instance.OnValve;
            @Valve.performed -= instance.OnValve;
            @Valve.canceled -= instance.OnValve;
        }

        public void RemoveCallbacks(ILeverAndValveActions instance)
        {
            if (m_Wrapper.m_LeverAndValveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeverAndValveActions instance)
        {
            foreach (var item in m_Wrapper.m_LeverAndValveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeverAndValveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeverAndValveActions @LeverAndValve => new LeverAndValveActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface ILeverAndValveActions
    {
        void OnFirstLever(InputAction.CallbackContext context);
        void OnSecondlever(InputAction.CallbackContext context);
        void OnValve(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
    }
}
